Loom: https://www.loom.com/share/f8a195d6c90a4c85817d78c1a2caf566

//Brian Macias
//CST-201
//This is my own work

#include <iostream>

using namespace std;

struct node {
	int data;
	node* next;
};
class myList {
	struct node* head = NULL;
	struct node* tail = NULL;
public:
	void insertFront(int newData);
	void insertEnd(int newData);
	void insertPos(int pos, int newData);
	void deleteNode(int newData);
	void front();
	void back();
	void insertVal(int newData);
	void pop_front();
	void pop_back();
	void empty();
	void size();
	void reverse();
	void merge(myList list2);
	void merge();
	void display();
};

struct node* head = NULL;
struct node* tail = NULL;

void myList::insertFront(int newData) //O(1)
{
	struct node* newNode = new node;
	newNode->data = newData;
	newNode->next = head;
	head = newNode;
}


void myList::insertEnd(int newData) { //O(log n)
	struct node* newNode = new node;
	struct node* temp = head;
	newNode->data = newData;
	newNode->next = NULL;
	while (temp->next != NULL) {
		temp = temp->next;
	}
	temp->next = newNode;
}

void myList::insertPos(int pos, int newData) { //O(log n)
	node* previous = new node;
	node* current = new node;
	node* temp = new node;
	current = head;
	for (int i = 1; i < pos; i++)
	{
		previous = current;
		current = current->next;
	}
	temp->data = newData;
	previous->next = temp;
	temp->next = current;
}

void myList::deleteNode(int newData) {	//O(log n)
	struct node* temp = head;
	struct node* prevoius = new node;
	if (temp != NULL && temp->data == newData) {
		head = temp->next;
		delete(temp);
	}
	while (temp != NULL && temp->data != newData) {
		prevoius = temp;
		temp = temp->next;
	}
	prevoius->next = temp->next;
	delete(temp);
}

void myList::front() {	//O(1)
	struct node* temp;
	temp = head;
	cout << temp->data << endl;
}

void myList::back() {	//O(n)
	struct node* temp;
	temp = head;
	while (temp->next != NULL) {
		temp = temp->next;
	}
	cout << temp->data << endl;
}

void myList::insertVal(int newData) {	//O(log n)
	struct node* newNode = new node;
	struct node* temp = head;
	newNode->data = newData;
	newNode->next = NULL;
	while (temp->next != NULL) {
		temp = temp->next;
	}
	temp->next = newNode;
}

void myList::pop_front() {	//O(1)
	node* temp = new node;
	temp = head;
	head = head->next;
	delete temp;
}

void myList::pop_back() {	//O(log n)
	node* current = new node;
	node* previous = new node;
	current = head;
	while (current->next != NULL)
	{
		previous = current;
		current = current->next;
	}
	tail = previous;
	previous->next = NULL;
	delete current;
}

void myList::empty() {	//O(1)
	struct node* temp;
	temp = head;

	if (temp->next != NULL) {
		cout << "List is not empty." << endl;
	}
	else {
		cout << "List is empty." << endl;
	}
}

void myList::size() {	//O(log n)
	struct node* temp;
	temp = head;
	int size = 0;

	while (temp != NULL) {
		temp = temp->next;
		size++;
	}
	cout << "Size = " << size << endl;
}

void myList::reverse() {	//O(log n)
	struct node* previous;
	struct node* next;
	struct node* curr;

	previous = head;
	next = head;
	curr = next;

	previous = previous->next;
	curr->next = NULL;
	while (previous != NULL)
	{
		next = previous;
		previous = previous->next;
		next->next = curr;
		curr = next;
	}
	head = curr;

}

void myList::merge(myList list2) { //O(n^2)
	myList list3;

	struct node* temp;
	struct node* temp2;
	temp = head;
	temp2 = list2.head;

	while (temp->next != NULL) {
		list3.insertFront(temp->data);
		temp = temp->next;
	}
	while (temp2->next != NULL) 
		if (temp2->data == temp->data) {
			temp->next;
		}else{
			list3.insertEnd(temp2->data);
			temp2 = temp2->next;
			temp->next;
	}
	cout << "List 3:";
	list3.display();
}

void myList::display() { //O(log n)
	struct node* temp;
	temp = head;
	while (temp != NULL) {
		cout << temp->data << " ";
		temp = temp->next;
	}
	cout << endl;
}

int main() {
	myList list1;
	myList list2;

	list1.insertFront(10); //works
	list1.insertFront(20);
	list1.insertFront(30);
	list1.insertFront(40);
	list1.insertEnd(60);  //works
	list1.display();

	list1.insertVal(25);
	list1.insertPos(3, 15); //works
	list1.display();
	list1.front();		//works
	list1.back();			//works

	list1.empty();	//works
	list1.size();
	list1.reverse();	//works
	list1.display();

	list2.insertFront(25);
	list2.insertFront(45);
	list2.insertFront(35);
	list2.display();

	list1.merge(list2);

	list1.deleteNode(30); //works
	list1.display();
	list1.pop_front();	//works
	list1.display();
	list1.pop_back();	//works
	list1.display();

	return 0;
}